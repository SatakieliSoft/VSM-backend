from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List

from app.db.database import SessionLocal
from app.models.user import User
from app.schemas.user import UserCreate, UserRead
from app.services.points import assign_points_to_user
from app.auth.auth_utils import get_current_user  # ğŸ”¹ DÃ´leÅ¾itÃ½ import

router = APIRouter()

# ZÃ­skanie databÃ¡zovej session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Zoznam vÅ¡etkÃ½ch pouÅ¾Ã­vateÄ¾ov
@router.get("/", response_model=List[UserRead])
def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    return db.query(User).offset(skip).limit(limit).all()

# ZÃ­skanie pouÅ¾Ã­vateÄ¾a podÄ¾a ID
@router.get("/{user_id}", response_model=UserRead)
def read_user(user_id: int, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user

# ğŸ”¹ ZÃ­skanie aktuÃ¡lne prihlÃ¡senÃ©ho pouÅ¾Ã­vateÄ¾a
@router.get("/me", response_model=UserRead)
def get_current_user_profile(current_user: User = Depends(get_current_user)):
    return current_user

# Vytvorenie novÃ©ho pouÅ¾Ã­vateÄ¾a
@router.post("/", response_model=UserRead)
def create_user(user: UserCreate, db: Session = Depends(get_db)):
    db_user = User(**user.dict())
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

# Pridanie bodov pouÅ¾Ã­vateÄ¾ovi
@router.post("/add-points/{user_id}")
def add_points(user_id: int, points: int, db: Session = Depends(get_db)):
    try:
        user = assign_points_to_user(user_id, points, db)
        return {"message": f"{points} bodov pridanÃ½ch.", "total": user.points}
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))
